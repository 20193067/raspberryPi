import RPi.GPIO as GPIO
import time
from mcpi.minecraft import Minecraft
import mcpi.block as block
import numpy as np
import cv2
from gpiozero import Button

wool = 35
air = 0
mc = Minecraft.create()

button1 = 17
button2 = 27
button3 = 22

faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') 

scale = [262, 294, 330, 349, 392, 440, 494, 523, 1]
        # do1   re2   mi3   pa4   sol5  ra6  si7 do8

melody1 = [1,1,5,5,6,6,5,4,4,3,3,2,2,1,5,5,4,4,3,3,2,5,5,4,4,3,3,2,1,1,5,5,6,6,5,4,4,3,3,2,2,1] 
melody2 = [6,1,2,2,4,5,6,1,6,5,4,2,6,5,2,6,5,2,1,6,6,1,2,2,4,5,6,1,6,5,4,2,6,5,2,6,5,2,1,2]

button11 = Button(button1)
button22 = Button(button2)
button33 = Button(button3)

 

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

buzzer=18

GPIO.setup(buzzer,GPIO.OUT)

cap = cv2.VideoCapture(0)
cap.set(3,640) # set Width
cap.set(4,480) # set Height

pwm = GPIO.PWM(buzzer, 1.0)
pwm.start(90.0)

mc.setBlocks( -13, 3, -2, -6, 3, 14, wool, 15)
mc.setBlocks( -14, 1, -2, -14, 3, 14, wool, 15)

flag = True

def sound1():

    for i in range(0,42):
        pwm.ChangeFrequency(scale[melody1[i]])

        if i == 6 or i == 13 or i == 20 or i == 27 or i == 34 or i == 41:
            time.sleep(1.0)

        else :
            time.sleep(0.5)

    flag = True

 

def sound2():

    for i in range(0, 40):
        pwm.ChangeFrequency(scale[melody2[i]])
        if i == 19 or i == 39 :
            time.sleep(1.2)
        elif i == 20 or i == 40 :
            time.sleep(1.3)
        elif i == 3 or i == 6 or i == 9 or i == 12 or i == 15 or i == 18 or i == 23 or i == 26 or i == 29 or i ==32 :
            time.sleep(1.0)
        else :
            time.sleep(0.5)

while flag == True:
    i = 0
    x, y, z = mc.player.getTilePos()
    flag = True
    if (x == -13 and z == -1):
        pwm.ChangeFrequency(scale[0])
        mc.setBlock(-13,1,-1,wool, 1)
        mc.setBlock(-12,1,-1,wool, 1)
        mc.setBlock(-11,1,-1,wool, 1)

    elif button11.is_pressed :
        mc.setBlocks( -13, 3, -2, -6, 3, 14, wool, 15)
        mc.setBlocks( -14, 1, -2, -14, 3, 14, wool, 15)

    elif button22.is_pressed :
        sound1()

    elif button33.is_pressed :
        sound2()

    elif (x == -12 and z == -1):
        pwm.ChangeFrequency(scale[0])

        mc.setBlock(-13,1,-1,wool, 1)
        mc.setBlock(-12,1,-1,wool, 1)
        mc.setBlock(-11,1,-1,wool, 1)

    elif (x == -11 and z == -1):
        pwm.ChangeFrequency(scale[0])
        mc.setBlock(-13,1,-1,wool, 1)
        mc.setBlock(-12,1,-1,wool, 1)
        mc.setBlock(-11,1,-1,wool, 1)

    elif (x == -13 and z == 1):
        pwm.ChangeFrequency(scale[1])
        mc.setBlock(-13,1,1,wool, 2)
        mc.setBlock(-12,1,1,wool, 2)
        mc.setBlock(-11,1,1,wool, 2)

    elif (x == -12 and z == 1):

        pwm.ChangeFrequency(scale[1])
        mc.setBlock(-13,1,1,wool, 2)
        mc.setBlock(-12,1,1,wool, 2)
        mc.setBlock(-11,1,1,wool, 2)

    elif (x == -11 and z == 1):

        pwm.ChangeFrequency(scale[1])
        mc.setBlock(-13,1,1,wool, 2)
        mc.setBlock(-12,1,1,wool, 2)
        mc.setBlock(-11,1,1,wool, 2)

    elif (x == -13 and z == 3):

        pwm.ChangeFrequency(scale[2])
        mc.setBlock(-13,1,3,wool, 3)

        mc.setBlock(-12,1,3,wool, 3)
        mc.setBlock(-11,1,3,wool, 3)

    elif (x == -12 and z == 3):

        pwm.ChangeFrequency(scale[2])
        mc.setBlock(-13,1,3,wool, 3)
        mc.setBlock(-12,1,3,wool, 3)
        mc.setBlock(-11,1,3,wool, 3)

    elif (x == -11 and z == 3):

        pwm.ChangeFrequency(scale[2])
        mc.setBlock(-13,1,3,wool, 3)
        mc.setBlock(-12,1,3,wool, 3)
        mc.setBlock(-11,1,3,wool, 3)

    elif (x == -13 and z == 5):

        pwm.ChangeFrequency(scale[3])
        mc.setBlock(-13,1,5,wool, 4)
        mc.setBlock(-12,1,5,wool, 4)
        mc.setBlock(-11,1,5,wool, 4)

    elif (x == -12 and z == 5):

        pwm.ChangeFrequency(scale[3])
        mc.setBlock(-13,1,5,wool, 4)
        mc.setBlock(-12,1,5,wool, 4)
        mc.setBlock(-11,1,5,wool, 4)

    elif (x == -11 and z == 5):

        pwm.ChangeFrequency(scale[3])
        mc.setBlock(-13,1,5,wool, 4)
        mc.setBlock(-12,1,5,wool, 4)
        mc.setBlock(-11,1,5,wool, 4)

    elif (x == -13 and z == 7):

        pwm.ChangeFrequency(scale[4])
        mc.setBlock(-13,1,7,wool, 5)
        mc.setBlock(-12,1,7,wool, 5)
        mc.setBlock(-11,1,7,wool, 5)

    elif (x == -12 and z == 7):

        pwm.ChangeFrequency(scale[4])
        mc.setBlock(-13,1,7,wool, 5)
        mc.setBlock(-12,1,7,wool, 5)
        mc.setBlock(-11,1,7,wool, 5)

    elif (x == -11 and z == 7):

        pwm.ChangeFrequency(scale[4])
        mc.setBlock(-13,1,7,wool, 5)
        mc.setBlock(-12,1,7,wool, 5)
        mc.setBlock(-11,1,7,wool, 5)

    elif (x == -13 and z == 9):

        pwm.ChangeFrequency(scale[5])
        mc.setBlock(-13,1,9,wool, 6)
        mc.setBlock(-12,1,9,wool, 6)
        mc.setBlock(-11,1,9,wool, 6)

    elif (x == -12 and z == 9):

        pwm.ChangeFrequency(scale[5])
        mc.setBlock(-13,1,9,wool, 6)
        mc.setBlock(-12,1,9,wool, 6)
        mc.setBlock(-11,1,9,wool, 6)

    elif (x == -11 and z == 9):

        pwm.ChangeFrequency(scale[5])
        mc.setBlock(-13,1,9,wool, 6)
        mc.setBlock(-12,1,9,wool, 6)
        mc.setBlock(-11,1,9,wool, 6)

    elif (x == -13 and z == 11):

        pwm.ChangeFrequency(scale[6])
        mc.setBlock(-13,1,11,wool, 7)
        mc.setBlock(-12,1,11,wool, 7)
        mc.setBlock(-11,1,11,wool, 7)

    elif (x == -12 and z == 11):

        pwm.ChangeFrequency(scale[6])
        mc.setBlock(-13,1,11,wool, 7)
        mc.setBlock(-12,1,11,wool, 7)
        mc.setBlock(-11,1,11,wool, 7)
    elif (x == -11 and z == 11):

        pwm.ChangeFrequency(scale[6])
        mc.setBlock(-13,1,11,wool, 7)
        mc.setBlock(-12,1,11,wool, 7)
        mc.setBlock(-11,1,11,wool, 7)

    elif (x == -13 and z == 13):

        pwm.ChangeFrequency(scale[7])
        mc.setBlock(-13,1,13,wool, 8)
        mc.setBlock(-12,1,13,wool, 8)
        mc.setBlock(-11,1,13,wool, 8)

    elif (x == -12 and z == 13):

        pwm.ChangeFrequency(scale[7])
        mc.setBlock(-13,1,13,wool, 8)
        mc.setBlock(-12,1,13,wool, 8)
        mc.setBlock(-11,1,13,wool, 8)

    elif (x == -11 and z == 13):

        pwm.ChangeFrequency(scale[7])
        mc.setBlock(-13,1,13,wool, 8)
        mc.setBlock(-12,1,13,wool, 8)
        mc.setBlock(-11,1,13,wool, 8)

    else:

        pwm.ChangeFrequency(scale[8])
        mc.setBlock(-13,1,-1,wool, 0)
        mc.setBlock(-12,1,-1,wool, 0)
        mc.setBlock(-11,1,-1,wool, 0)

        mc.setBlock(-13,1,1,wool, 0)
        mc.setBlock(-12,1,1,wool, 0)
        mc.setBlock(-11,1,1,wool, 0)
        mc.setBlock(-13,1,3,wool, 0)
        mc.setBlock(-12,1,3,wool, 0)
        mc.setBlock(-11,1,3,wool, 0)
        mc.setBlock(-13,1,5,wool, 0)
        mc.setBlock(-12,1,5,wool, 0)
        mc.setBlock(-11,1,5,wool, 0)
        mc.setBlock(-13,1,7,wool, 0)
        mc.setBlock(-12,1,7,wool, 0)
        mc.setBlock(-11,1,7,wool, 0)
        mc.setBlock(-13,1,9,wool, 0)
        mc.setBlock(-12,1,9,wool, 0)
        mc.setBlock(-11,1,9,wool, 0)
        mc.setBlock(-13,1,11,wool, 0)
        mc.setBlock(-12,1,11,wool, 0)
        mc.setBlock(-11,1,11,wool, 0)
        mc.setBlock(-13,1,13,wool, 0)
        mc.setBlock(-12,1,13,wool, 0)
        mc.setBlock(-11,1,13,wool, 0)

    ret, img = cap.read() 
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = faceCascade.detectMultiScale(gray, 1.3, 5)

    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w]
        i = 1

    if (i ==  1):
        mc.setBlocks( -13, 3, -2, -7, 3, 14, air)
        mc.setBlocks( -14, 1, -2, -14, 3, 14, air)
        print(faces)

    k = cv2.waitKey(1) & 0xff
    cv2.imshow('Face Detector',img)
    k = cv2.waitKey(1) & 0xff
    if k == ord('q'): # press 'ESC' to quit
        break

cap.release()
cv2.destroyAllWindows()  
pwm.stop()
GPIO.cleanup()
